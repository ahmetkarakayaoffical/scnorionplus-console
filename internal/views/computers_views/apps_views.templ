package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/ahmetkarakayaoffical/ent"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/filters"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/partials"
	"strings"
)

templ Apps(c echo.Context, p partials.PaginationAndSort, f filters.ApplicationsFilter, agent *ent.Agent, apps []*ent.App, confirmDelete bool, commonInfo *partials.CommonInfo) {
	@partials.ComputerBreadcrumb(c, agent, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@partials.ComputerHeader(p, agent, commonInfo)
				@ComputersNavbar(agent.ID, "software", agent.VncProxyPort, confirmDelete, commonInfo, agent.Os)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), string(templ.URL(partials.GetNavigationUrl(commonInfo, "/computers"))), string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s", agent.ID)))))
				}
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="app-window" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "inventory.apps.title") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "inventory.apps.description") }
						</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default">
					if len(apps) > 0 {
						<table class="uk-table uk-table-divider uk-table-small uk-table-striped -mt-4">
							<thead>
								<tr>
									<th class="sr-only w-1/12">{ i18n.T(ctx, "Logo") }</th>
									<th class="w-1/3">
										<div class="flex gap-2 items-center ">
											<span>{ i18n.T(ctx, "Name") }</span>
											@partials.SortByColumnIcon(c, p, i18n.T(ctx, "Name"), "name", "alpha", "#main", "outerHTML", "get")
											@filters.FilterByText(c, p, "AppName", f.AppName, "apps.filter_by_name", "#main", "outerHTML")
										</div>
									</th>
									<th class="w-2/12">
										<div class="flex gap-2 items-center ">
											<span>{ i18n.T(ctx, "Version") }</span>
											@partials.SortByColumnIcon(c, p, i18n.T(ctx, "Version"), "version", "alpha", "#main", "outerHTML", "get")
											@filters.FilterByText(c, p, "AppVersion", f.Version, "apps.filter_by_version", "#main", "outerHTML")
										</div>
									</th>
									<th class="w-1/3">
										<div class="flex gap-2 items-center ">
											<span>{ i18n.T(ctx, "Publisher") }</span>
											@partials.SortByColumnIcon(c, p, i18n.T(ctx, "Publisher"), "publisher", "alpha", "#main", "outerHTML", "get")
											@filters.FilterByText(c, p, "AppPublisher", f.Vendor, "apps.filter_by_publisher", "#main", "outerHTML")
										</div>
									</th>
									<th class="w-1/12">
										<div class="flex gap-2 items-center ">
											<span>{ i18n.T(ctx, "inventory.apps.installation_date") }</span>
											@partials.SortByColumnIcon(c, p, i18n.T(ctx, "inventory.apps.installation_date"), "installation", "alpha", "#main", "outerHTML", "get")
										</div>
									</th>
								</tr>
							</thead>
							for _, app := range apps {
								<tr class="h-16">
									<td class="!align-middle text-center">
										@partials.Brand(strings.ToLower(app.Name), strings.ToLower(app.Publisher))
									</td>
									<td class="!align-middle">{ app.Name }</td>
									if app.Version == "" {
										<td class="!align-middle">-</td>
									} else {
										<td class="!align-middle">{ app.Version }</td>
									}
									if app.Publisher == "" {
										<td class="!align-middle">-</td>
									} else {
										<td class="!align-middle">{ app.Publisher }</td>
									}
									if app.InstallDate == "" {
										<td class="!align-middle">-</td>
									} else {
										<td class="!align-middle">{ app.InstallDate }</td>
									}
								</tr>
							}
							if len(apps) < p.PageSize {
								for i:=0; i < p.PageSize - len(apps); i++ {
									<tr class="h-16">
										<td class="!align-middle"></td>
										<td class="!align-middle">-</td>
										<td class="!align-middle">-</td>
										<td class="!align-middle">-</td>
										<td class="!align-middle">-</td>
									</tr>
								}
							}
						</table>
						@partials.Pagination(c, p, "get", "#main", "outerHTML", string(templ.URL(partials.GetNavigationUrl(commonInfo, fmt.Sprintf("/computers/%s/software", agent.ID)))))
					} else {
						<p class="uk-text-small uk-text-muted">
							{ i18n.T(ctx, "inventory.apps.no_apps") }
						</p>
					}
				</div>
			</div>
		</div>
	</main>
}
