package admin_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"github.com/ahmetkarakayaoffical/ent"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/filters"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/layout"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/partials"
	"golang.org/x/mod/semver"
	"strconv"
	"time"
)

type FileInfo struct {
	Arch     string `json:"arch,omitempty"`
	Os       string `json:"os,omitempty"`
	FileURL  string `json:"file_url,omitempty"`
	Checksum string `json:"checksum,omitempty"`
}

type LatestRelease struct {
	Version         string     `json:"version,omitempty"`
	Channel         string     `json:"channel,omitempty"`
	Summary         string     `json:"summary,omitempty"`
	ReleaseNotesURL string     `json:"release_notes,omitempty"`
	ReleaseDate     time.Time  `json:"release_date,omitempty"`
	Files           []FileInfo `json:"files,omitempty"`
	IsCritical      bool       `json:"is_critical,omitempty"`
}

templ UpdateAgents(c echo.Context, p partials.PaginationAndSort, f filters.UpdateAgentsFilter, agents []*ent.Agent, settings *ent.Settings, latestRelease *ent.Release, higherReleaseApplied *ent.Release, allReleases []string, availableReleases, availableTaskStatus []string, tags []*ent.Tag, refresh int, successMessage, errorMessage string, agentsExists, serversExists bool, commonInfo *partials.CommonInfo, tenantName string) {
	@partials.Header(c, []partials.Breadcrumb{{Title: tenantName, Url: string(templ.URL(fmt.Sprintf("/tenant/%s/admin/tags", commonInfo.TenantID)))}, {Title: i18n.T(ctx, "admin.update.agents.title"), Url: string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents", commonInfo.TenantID)))}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("update-agents", agentsExists, serversExists, commonInfo)
				if successMessage != "" {
					@partials.SuccessMessage(successMessage)
				} else {
					<div id="success" class="hidden"></div>
				}
				if errorMessage != "" {
					@partials.ErrorMessage(errorMessage, true)
				} else {
					<div id="error" class="hidden"></div>
				}
				<div id="confirm" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "admin.update.agents.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "admin.update.agents.description") }
						</p>
					</div>
					<div class="uk-card-body">
						if len(agents) > 0 {
							<div class="flex flex-col gap-4 mt-4">
								if latestRelease == nil {
									@GetVersionError()
								}
								if latestRelease != nil {
									<div class="flex items-center justify-between">
										if newReleaseAvailable(latestRelease.Version, higherReleaseApplied.Version) {
											<p class={ "rounded-full px-4 py-1 text-white", templ.KV("bg-red-500", latestRelease.IsCritical), templ.KV("bg-blue-700", !latestRelease.IsCritical) }>
												if latestRelease.IsCritical {
													{ i18n.T(ctx, "admin.update.agents.critical") }
												} else {
													{ i18n.T(ctx, "admin.update.agents.available") }
												}
											</p>
										} else {
											<p class="rounded-full px-4 py-1 text-white bg-green-600">{ i18n.T(ctx, "admin.update.agents.current") }</p>
										}
									</div>
									<p class="uk-text-small">
										if newReleaseAvailable(latestRelease.Version, higherReleaseApplied.Version) {
											{ i18n.T(ctx, "admin.update.agents.new_version_available") }
										} else {
											{ i18n.T(ctx, "admin.update.agents.no_new_version_available") }
										}
										<a href={ templ.URL(latestRelease.ReleaseNotes) } class="underline uk-text-default uk-text-bold text-blue-700" target="_blank" rel="noopener">{ latestRelease.Version }</a>
									</p>
									if newReleaseAvailable(latestRelease.Version, higherReleaseApplied.Version) {
										<p class="uk-text-small">
											{ i18n.T(ctx, "admin.update.agents.new_version_date") }
											{ commonInfo.Translator.FmtDateMedium(latestRelease.ReleaseDate) }
										</p>
									}
									<p class="uk-text-small uk-text-italic">{ latestRelease.Summary } </p>
								}
								<hr class="uk-divider-icon"/>
								<div class="flex justify-between">
									<div class="flex items-center gap-4">
										@partials.RefreshPage(commonInfo.Translator, string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents", commonInfo.TenantID))), "#main", "outerHTML", "get", refresh, false)
										@filters.ClearFilters(string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents", commonInfo.TenantID))), "#main", "outerHTML", func() bool {
											return f.Nickname == "" && len(f.Releases) == 0 && len(f.Tags) == 0 &&
												len(f.TaskStatus) == 0 && len(f.TaskResult) == 0 &&
												len(f.TaskLastExecutionFrom) == 0 && len(f.TaskLastExecutionTo) == 0
										})
										<button
											id="select-all"
											title={ i18n.T(ctx, "SelectAll") }
											type="button"
											class="uk-button uk-button-default flex items-center gap-2"
											_={ fmt.Sprintf(`on click 
												repeat in <input[id^='check-']/>
													if it.checked is false then
														it.click()
													end
												end
												set storedItems to %s as Array
												set sessionStorage.selectedAgents to storedItems as JSON
												set #filterBySelectedItems.value to '%d'
												set #items-selected.innerHTML to '%d'
												if #filterBySelectedRelease.value is not empty then
													remove @disabled from #update-all-button
												end
											end`, f.SelectedAllAgents, p.NItems, p.NItems) }
										>
											{ i18n.T(ctx, "SelectAll") }
										</button>
										<button
											id="deselect-all"
											title={ i18n.T(ctx, "DeselectAll") }
											type="button"
											class="uk-button uk-button-default flex items-center gap-2"
											_="on click 
										repeat in <input[type='checkbox']/>
											if it.checked is true then
												it.click()
											end
										end
										set storedItems to [] as Array
										set sessionStorage.selectedAgents to storedItems as JSON
										set #filterBySelectedItems.value to '0'
										set #items-selected.innerHTML to '0'
										add @disabled to #update-all-button
									end"
										>
											{ i18n.T(ctx, "DeselectAll") }
										</button>
										<p class="uk-text-small"><span id="items-selected" class="uk-text-bold">{ strconv.Itoa(f.SelectedItems) }</span> { i18n.T(ctx, "Items") }</p>
									</div>
									<form class="flex items-center gap-4">
										<input id="filterBySelectedItems" type="hidden" name="filterBySelectedItems" value={ strconv.Itoa(f.SelectedItems) }/>
										<input id="selectedAgents" type="hidden" name="selectedAgents"/>
										<input id="filterBySelectedRelease" type="hidden" name="filterBySelectedRelease" value={ f.SelectedRelease }/>
										<select
											class="uk-select"
											_="on change
											if sessionStorage.selectedAgents exists then														
												set storedItems to sessionStorage.selectedAgents as Object
											end		

											set #filterBySelectedRelease.value to my.value
											if #filterBySelectedRelease.value is not empty and ((<input[title='check-agent']:checked/>).length > 0 or storedItems.length > 0) then
												remove @disabled from #update-all-button
											else
												add @disabled to #update-all-button
											end
										end"
											title={ i18n.T(ctx, "admin.update.agents.select_release") }
										>
											<option value="">{ i18n.T(ctx, "admin.update.agents.select_release") }</option>
											for _,r := range allReleases {
												<option value={ r } selected?={ r == f.SelectedRelease }>{ r }</option>
											}
										</select>
										<button
											id="update-all-button"
											title={ i18n.T(ctx, "UpdateAll") }
											type="button"
											class="uk-button uk-button-primary"
											hx-post={ string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents/confirm", commonInfo.TenantID))) }
											hx-push-url="false"
											hx-target="#main"
											hx-swap="outerHTML"
											disabled?={ f.SelectedItems == 0 || len(f.SelectedRelease) == 0 }
										>
											<div class="flex items-center gap-2">
												<uk-icon hx-history="false" icon="arrows-up-from-line" custom-class="h-5 w-5" uk-cloack></uk-icon>
												{ i18n.T(ctx, "Update") }
											</div>
										</button>
									</form>
								</div>
								<div class="flex flex-col gap-2">
									<table
										class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped  mt-4"
										_="on load
											if #filterBySelectedItems.value is '0' then
												set storedItems to [] as Array
												set sessionStorage.selectedAgents to storedItems as JSON
											end
										end"
									>
										<thead>
											<tr>
												<th>
													<input
														id="check-all-in-page"
														name="check-all-in-page"
														class="uk-checkbox"
														type="checkbox"
														_="on click
															repeat in <input[title='check-agent']/>																
																if it.checked !== #check-all-in-page.checked then
																	it.click()
																end
															end

															if ((<input[title='check-agent']:checked/>).length > 0) and #filterBySelectedRelease.value is not empty then
																remove @disabled from #update-all-button
															else
																add @disabled to #update-all-button
															end
														"
													/>
												</th>
												<th class="w-2/12">
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "agents.nickname") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.nickname"), "nickname", "alpha", "#main", "outerHTML", "get")
														@filters.FilterByText(c, p, "Nickname", f.Nickname, "agents.filter_by_nickname", "#main", "outerHTML")
													</div>
												</th>
												<th class="w-1/12">
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "agents.version") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.version"), "version", "alpha", "#main", "outerHTML", "get")
														@filters.FilterByOptions(c, p, "Release", "admin.update.agents.filter_by_release", availableReleases, f.Releases, "#main", "outerHTML", false, func() bool {
															return len(f.Releases) == 0
														})
													</div>
												</th>
												<th class="w-2/12">
													<div class="flex gap-1 items-center">
														{ i18n.T(ctx, "Tag.other") }
														@filters.FilterByTags(c, p, f.Tags, "#main", "outerHTML", tags, func() bool { return len(f.Tags) == 0 })
													</div>
												</th>
												<th class="w-1/12">
													<div class="flex gap-1 items-center">
														{ i18n.T(ctx, "admin.update.agents.task_status") }
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.nickname"), "taskStatus", "alpha", "#main", "outerHTML", "get")
														@filters.FilterByOptions(c, p, "TaskStatus", "admin.update.agents.filter_by_status", availableTaskStatus, f.TaskStatus, "#main", "outerHTML", true, func() bool {
															return len(f.TaskStatus) == 0
														})
													</div>
												</th>
												<th class="w-2/12">
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx,  "admin.update.agents.task_description") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "admin.update.agents.task_description"), "taskDescription", "alpha", "#main", "outerHTML", "get")
													</div>
												</th>
												<th class="w-2/12">
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "admin.update.agents.task_last_execution") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "admin.update.agents.task_last_execution"), "taskLastExecution", "time", "#main", "outerHTML", "get")
														@filters.FilterByDate(c, p, "LastExecution", "admin.update.agents.filter_by_task_execution", f.TaskLastExecutionFrom, f.TaskLastExecutionTo, "#main", "outerHTML", func() bool { return f.TaskLastExecutionFrom == "" && f.TaskLastExecutionTo == "" })
													</div>
												</th>
												<th class="w-2/12">
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "admin.update.agents.task_result") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "admin.update.agents.task_result"), "taskResult", "alpha", "#main", "outerHTML", "get")
														@filters.FilterByText(c, p, "TaskResult", f.TaskResult, "admin.update.agents.filter_by_task_result", "#main", "outerHTML")
													</div>
												</th>
											</tr>
										</thead>
										for _, agent := range agents {
											<tr class="h-16">
												<td class="!align-middle">
													<input
														id={ "check-agent-" + agent.ID }
														title="check-agent"
														name={ agent.ID }
														class="uk-checkbox"
														type="checkbox"
														_={ fmt.Sprintf(`
															on click
																set storedItems to [] as Array
																if sessionStorage.selectedAgents exists then														
																	set storedItems to sessionStorage.selectedAgents as Object
																end																								

																set index to storedItems.indexOf(my name)		
																if me.checked then
																	increment #filterBySelectedItems.value by 1
																	set #items-selected.innerHTML to #filterBySelectedItems.value
																	if index < 0 then 															
																		append my name to storedItems
																		set sessionStorage.selectedAgents to storedItems as JSON
																	end														
																else
																	decrement #filterBySelectedItems.value by 1
																	set #items-selected.innerHTML to #filterBySelectedItems.value
																	set index to storedItems.indexOf(my name)														
																	if index >= 0 then 															
																		get storedItems.splice(index, 1)															
																	end															
																	
																	if no storedItems then 
																		set storedItems to [] as Array
																		set #filterBySelectedItems.value to '0'
																	end

																	set sessionStorage.selectedAgents to storedItems as JSON 
																end

																if ((<input[title='check-agent']:checked/>).length > 0 or storedItems.length > 0) and #filterBySelectedRelease.value is not empty then
																	remove @disabled from #update-all-button
																else
																	add @disabled to #update-all-button
																end

																if #check-all-in-page.checked is true and me.checked is false then
																	set #check-all-in-page.checked to false
																end

																if #check-all-in-page.checked is false and (<input[title='check-agent']:checked/>).length === %d then
																	set #check-all-in-page.checked to true
																end

																set #selectedAgents.value to storedItems.length
															end

															on load
																set storedItems to [] as Array
																if sessionStorage.selectedAgents exists then
																	set storedItems to sessionStorage.selectedAgents as Object												
																end

																set index to storedItems.indexOf(my name)														
																if index >= 0 then
																	set me.checked to true
																end

																if ((<input[title='check-agent']:checked/>).length == (<input[title='check-agent']/>).length) then
																	set #check-all-in-page.checked to true
																end

																set #selectedAgents.value to storedItems.length
															end
														`,p.PageSize) }
													/>
												</td>
												<td class="!align-middle">{ agent.Nickname }</td>
												<td class="!align-middle">
													<div class="flex items-center gap-2">
														{ agent.Edges.Release.Version }
														if semver.Compare("v" + agent.Edges.Release.Version, "v"+ higherReleaseApplied.Version) < 0 {
															@partials.AlertIcon(i18n.T(ctx, "admin.update.agents.outdated"))
														}
													</div>
												</td>
												<td class="!align-middle">
													<div class="flex flex-wrap gap-2">
														@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, p, string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents", commonInfo.TenantID))), "#main", "outerHTML")
													</div>
												</td>
												if len(agent.UpdateTaskStatus) > 0 {
													<td
														class={
															"!align-middle uk-text-bold",
															templ.KV("text-red-600", agent.UpdateTaskStatus == "admin.update.agents.task_status_error"),
															templ.KV("text-orange-600", agent.UpdateTaskStatus == "admin.update.agents.task_status_pending"),
															templ.KV("text-green-600", agent.UpdateTaskStatus == "admin.update.agents.task_status_success"),
														}
													>{ i18n.T(ctx, agent.UpdateTaskStatus) }</td>
												} else {
													<td class="!align-middle"></td>
												}
												if len(agent.UpdateTaskDescription) > 0 {
													<td class="!align-middle">
														{ agent.UpdateTaskDescription }
													</td>
												} else {
													<td class="!align-middle"></td>
												}
												if !agent.UpdateTaskExecution.IsZero() {
													<td class="!align-middle">
														{ commonInfo.Translator.FmtDateMedium(agent.UpdateTaskExecution.Local()) + " " + commonInfo.Translator.FmtTimeShort(agent.UpdateTaskExecution.Local()) }
													</td>
												} else {
													<td class="!align-middle"></td>
												}
												<td class="!align-middle">
													{ agent.UpdateTaskResult }
												</td>
											</tr>
										}
										if len(agents) < p.PageSize {
											for i:=0; i < p.PageSize - len(agents); i++ {
												<tr class="h-16">
													<td class="!align-middle"></td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
													<td class="!align-middle">-</td>
												</tr>
											}
										}
									</table>
								</div>
								@partials.Pagination(c, p, "get", "#main", "outerHTML", string(templ.URL(fmt.Sprintf("/tenant/%s/admin/update-agents", commonInfo.TenantID))))
							</div>
						} else {
							<p class="uk-text-small uk-text-muted mt-4">
								{ i18n.T(ctx, "agents.no_agents") }
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ UpdateAgentsBody() {
}

templ GetVersionError() {
	<div id="error-getting-version" class="mt-6">
		<div
			class="uk-alert uk-animation-fade  border-red-700 bg-red-600 text-white "
			uk-alert="animation:true"
		>
			<a href class="uk-alert-close" uk-close _="on click toggle .hidden on #error-getting-version"></a>
			<div class="flex gap-2 items-center uk-alert-description">
				<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-8 w-8 pr-2" uk-cloack></uk-icon>
				<span>{ i18n.T(ctx, "admin.update.agents.get_version_error") }</span>
			</div>
		</div>
	</div>
}

templ UpdateAgentsIndex(title string, cmp templ.Component, commonInfo *partials.CommonInfo) {
	@layout.Base("admin", commonInfo) {
		@cmp
	}
}

func newReleaseAvailable(newReleaseVersion, higherReleaseAppliedVersion string) bool {
	return semver.Compare("v"+newReleaseVersion, "v"+higherReleaseAppliedVersion) == 1
}
