package admin_views

import (
	"fmt"
	"github.com/alexedwards/scs/v2"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"github.com/mssola/useragent"
	ent "github.com/ahmetkarakayaoffical/ent"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/layout"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/views/partials"
	"log"
)

templ Sessions(c echo.Context, p partials.PaginationAndSort, sessions []*ent.Sessions, successMessage, errMessage string, codec scs.Codec, agentsExists, serversExists bool, commonInfo *partials.CommonInfo) {
	@partials.Header(c, []partials.Breadcrumb{{Title: i18n.T(ctx, "Global Config"), Url: "/admin/users"}, {Title: i18n.T(ctx, "Session.other"), Url: "/admin/sessions"}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("sessions", agentsExists, serversExists, commonInfo)
				<div id="confirm" class="hidden"></div>
				@partials.SuccessMessage(successMessage)
				@partials.ErrorMessage(errMessage, true)
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "sessions.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "sessions.description") }
						</p>
					</div>
					<div class="uk-card-body">
						if len(sessions) > 0 {
							<table class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped  mt-6">
								<thead>
									<tr>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.uid") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "users.uid"), "uid", "alpha", "#main", "outerHTML", "get")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "sessions.user_agent") }</span>
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "IP Address") }</span>
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "sessions.token") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "sessions.token"), "token", "alpha", "#main", "outerHTML", "get")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "sessions.expiry") }</span>
												@partials.SortByColumnIcon(c, p, i18n.T(ctx, "sessions.expiry"), "expiry", "time", "#main", "outerHTML", "get")
											</div>
										</th>
										<th>
											<div class="flex gap-1 items-center">
												<span class="sr-only">{ i18n.T(ctx, "Actions") }</span>
											</div>
										</th>
									</tr>
								</thead>
								for index, session := range sessions {
									<tr>
										<td>{ session.Edges.Owner.ID }</td>
										<td>{ decodeUserAgent(decodeData(session.Data, codec, "user-agent")) }</td>
										<td>{ decodeData(session.Data, codec, "ip-address") }</td>
										<td>{ session.ID }</td>
										if session.Expiry.IsZero() {
											<td>-</td>
										} else {
											<td>{ commonInfo.Translator.FmtDateMedium(session.Expiry.Local()) + " " + commonInfo.Translator.FmtTimeShort(session.Expiry.Local()) }</td>
										}
										<td>
											@partials.MoreButton(index)
											<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
												<ul class="uk-dropdown-nav uk-nav" _={ fmt.Sprintf("on click call #moreButton%d.click()", index) }>
													<li>
														<a
															hx-get={ string(templ.URL(fmt.Sprintf("/admin/sessions/%s/delete", session.ID))) }
															hx-target="#main"
															hx-swap="outerHTML"
														><uk-icon hx-history="false" icon="trash-2" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "Delete") }</a>
													</li>
												</ul>
											</div>
										</td>
									</tr>
								}
							</table>
							@partials.Pagination(c, p, "get", "#main", "outerHTML", "/admin/sessions")
						} else {
							<p class="uk-text-small uk-text-muted">
								{ i18n.T(ctx, "sessions.nosessions") }
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ SessionsDelete(c echo.Context, session *ent.Sessions, codec scs.Codec, commonInfo *partials.CommonInfo) {
	@partials.Header(c, []partials.Breadcrumb{{Title: i18n.T(ctx, "Global Config"), Url: "/admin/users"}, {Title: "Sessions", Url: "/admin/sessions"}}, commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		@partials.ConfirmDelete(c, i18n.T(ctx, "confirm.session_delete"), "/admin/sessions", string(templ.URL(fmt.Sprintf("/admin/sessions/%s", session.ID))))
	</main>
}

templ SessionInfo(session *ent.Sessions, codec scs.Codec) {
	<div class="uk-width-1-2@m uk-card uk-card-default">
		<div class="uk-card-body">
			<table class="uk-table uk-table-striped ">
				<tr><th>{ i18n.T(ctx, "session.uid") }</th><td>{ session.Edges.Owner.ID }</td></tr>
				<tr><th>{ i18n.T(ctx, "session.user_agent") }</th><td>{ decodeData(session.Data, codec, "user-agent") }</td></tr>
				<tr><th>{ i18n.T(ctx, "IP Address") }</th><td>{ decodeData(session.Data, codec, "ip-address") }</td></tr>
				<tr><th>{ i18n.T(ctx, "session.expiry") }</th><td>{ session.Expiry.Local().String() }</td></tr>
			</table>
		</div>
	</div>
}

templ SessionsIndex(title string, cmp templ.Component, commonInfo *partials.CommonInfo) {
	@layout.Base("admin", commonInfo) {
		@cmp
	}
}

func decodeData(s []byte, codec scs.Codec, key string) string {
	_, values, err := codec.Decode(s)
	if err != nil {
		log.Println("could not decode session data")
		return "-"
	}

	_, ok := values[key]
	if ok {
		return values[key].(string)
	}
	return "-"
}

func decodeUserAgent(s string) string {
	if s == "-" {
		return s
	}

	ua := useragent.New(s)
	browser, version := ua.Browser()
	return browser + " " + version + " / " + ua.OS()
}
