package partials

import (
	"context"
	"fmt"
	"github.com/gohugoio/locales"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"github.com/ahmetkarakayaoffical/ent"
	"github.com/ahmetkarakayaoffical/scnorionplus-console/internal/controllers/sessions"
	"golang.org/x/mod/semver"
	"slices"
	"strconv"
	"strings"
)

type Breadcrumb struct {
	Title string
	Url   string
}

type CommonInfo struct {
	SM                 *sessions.SessionManager
	CurrentVersion     string
	LatestVersion      string
	Tenants            []*ent.Tenant
	Sites              []*ent.Site
	TenantID           string
	SiteID             string
	DetectRemoteAgents bool
	Translator         locales.Translator
	IsAdmin            bool
	ActionTenantID     string
	IsComputer         bool
	IsProfile          bool
}

templ Header(c echo.Context, breadcrumbs []Breadcrumb, commonInfo *CommonInfo) {
	<header class="sticky top-0 z-30 flex justify-between w-full h-14 items-center border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6">
		<nav id="header" class="flex">
			<ul class="uk-breadcrumb" aria-label="Breadcrumb">
				<li class="uk-text-muted uk-text-bold">scnorionplus</li>
				for _,bc := range breadcrumbs {
					<li>
						<a
							href={ templ.URL(bc.Url) }
							hx-get={ string(templ.URL(bc.Url)) }
							hx-target="#main"
							hx-swap="outerHTML"
							hx-push-url="true"
						>
							{ i18n.T(ctx, bc.Title, i18n.Default(bc.Title)) }
						</a>
					</li>
				}
			</ul>
		</nav>
		<div class="flex items-center gap-4">
			<form class="flex items-center gap-2">
				<span class="uk-text-muted">
					<uk-icon
						hx-history="false"
						if commonInfo.IsAdmin {
							icon="settings"
						} else {
							icon="globe"
						}
						custom-class="h-6 w-6"
						uk-cloack
					></uk-icon>
				</span>
				<select class="w-48 uk-select border-green-700" title={ i18n.T(ctx, "Organization") } name="tenant" _="on change set window.location to my.value">
					if commonInfo.IsAdmin {
						<option
							class="!align-middle"
							value="/admin"
							selected?={ commonInfo.TenantID ==  "-1" }
						>
							{ i18n.T(ctx,"Global Config") }
						</option>
					}
					for _, t := range commonInfo.Tenants {
						<option
							class="!align-middle"
							if commonInfo.IsAdmin {
								value={ string(templ.URL(fmt.Sprintf("/tenant/%d/admin", t.ID))) }
							} else {
								value={ string(templ.URL(fmt.Sprintf("/tenant/%d", t.ID))) }
							}
							selected?={ commonInfo.TenantID ==  strconv.Itoa(t.ID) }
						>
							if t.Description == "DefaultTenant" {
								{ i18n.T(ctx,"DefaultTenant") }
							} else {
								{ t.Description }
							}
						</option>
					}
				</select>
			</form>
			if !commonInfo.IsAdmin {
				if len(commonInfo.Sites) > 1 && !commonInfo.IsComputer {
					<form class="flex items-center gap-2">
						<span class="uk-text-muted">
							<uk-icon hx-history="false" icon="building" custom-class="h-6 w-6" uk-cloack></uk-icon>
						</span>
						<select class="w-48 uk-select border-green-700" title={ i18n.T(ctx, "Site.one") } name="site" _="on change set window.location to my.value">
							if !commonInfo.IsProfile {
								<option
									value={ GetSiteSelectorUrl(c, commonInfo, -1) }
									selected?={ commonInfo.SiteID ==  "-1" }
								>
									{ i18n.T(ctx,"AllSites") }
								</option>
							}
							for _, s := range commonInfo.Sites {
								<option
									value={ GetSiteSelectorUrl(c, commonInfo, s.ID) }
									selected?={ commonInfo.SiteID ==  strconv.Itoa(s.ID) }
								>
									if s.Description == "DefaultSite" {
										{ i18n.T(ctx,"DefaultSite") }
									} else {
										{ s.Description }
									}
								</option>
							}
						</select>
					</form>
				}
				if len(commonInfo.Sites) == 1  && !commonInfo.IsComputer {
					<div class="flex items-center gap-2 uk-text-muted">
						<span>
							<uk-icon hx-history="false" icon="building" custom-class="h-6 w-6" uk-cloack></uk-icon>
						</span>
						if commonInfo.Sites[0].Description == "DefaultSite" {
							{ i18n.T(ctx,"DefaultSite") }
						} else {
							{ commonInfo.Sites[0].Description }
						}
					</div>
				}
				if commonInfo.IsComputer {
					<div class="flex items-center gap-2 uk-text-muted">
						<span>
							<uk-icon hx-history="false" icon="building" custom-class="h-6 w-6" uk-cloack></uk-icon>
						</span>
						for _, s := range commonInfo.Sites {
							if commonInfo.SiteID == strconv.Itoa(s.ID) {
								if s.Description == "DefaultSite" {
									{ i18n.T(ctx,"DefaultSite") }
								} else {
									{ s.Description }
								}
							}
						}
					</div>
				}
			}
			<a
				href="#"
				_="
					on load
						if localStorage.mode is 'dark' then
							add [@icon=sun] to #theme-switch
							add [@custom-class=h-6 w-6 uk-text-muted] to #theme-switch
						else
							add [@icon=moon] to #theme-switch
							add [@custom-class=h-6 w-6] to #theme-switch
						end
					end

					on click
						if localStorage.mode is 'dark' then
							set localStorage.mode to ''
							remove .dark from <html/>
							add [@icon=moon] to #theme-switch
							add [@custom-class=h-6 w-6] to #theme-switch
						else
							set localStorage.mode to 'dark'
							add .dark to <html/>
							add [@icon=sun] to #theme-switch
							add [@custom-class=h-6 w-6 uk-text-muted] to #theme-switch
						end
					end"
			>
				<uk-icon id="theme-switch" hx-history="false" icon="moon" custom-class="h-6 w-6" uk-cloack></uk-icon>
			</a>
			<div class="flex items-center gap-4">
				<p class="text-sm uk-text-muted">scnorionplus { commonInfo.CurrentVersion }</p>
				if newVersionAvailable(commonInfo.CurrentVersion, commonInfo.LatestVersion) {
					<a
						href="/admin/update-servers"
						hx-get="/admin/update-servers"
						hx-push-url="true"
						hx-target="#main"
						hx-swap="outerHTML"
						uk-tooltip={ fmt.Sprintf("title: %s %s; pos: right", i18n.T(ctx, "admin.update.servers.new_version_available"), commonInfo.LatestVersion) }
					>
						<uk-icon hx-history="false" icon="cloud-download" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
					</a>
				}
			</div>
			<button title={ i18n.T(ctx, "Profile") } type="button" class="rounded-full uk-text-muted"><uk-icon hx-history="false" icon="user-circle" hx-history="false" custom-class="h-6 w-6" uk-cloack></uk-icon></button>
			<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
				<div class="flex flex-col gap-1">
					<div class="flex justify-center mt-4 mb-1">
						<uk-icon hx-history="false" icon="circle-user" custom-class="h-14 w-14 text-green-800" uk-cloack></uk-icon>
					</div>
					<p class="text-center uk-text-muted uk-text-small">{ GetUID(ctx, commonInfo.SM) }</p>
					<p class="text-center">{ GetUsername(ctx, commonInfo.SM) }</p>
					<button
						title={ i18n.T(ctx, "LogOut") }
						href="/logout"
						hx-post="/logout"
						hx-push-url="false"
						hx-target="body"
						uk-tooltip={ fmt.Sprintf("title: %s; pos: right", i18n.T(ctx, "LogOut")) }
						class={ "flex gap-2 items-center justify-center p-1 mb-4" }
					>
						<span class="uk-text-small uk-text-muted underline">{ i18n.T(ctx, "LogOut") }</span>
					</button>
				</div>
			</div>
		</div>
	</header>
}

func GetUID(ctx context.Context, sm *sessions.SessionManager) string {
	uid, ok := sm.Manager.Get(ctx, "uid").(string)
	if !ok || len(uid) == 0 {
		return "unknown"
	}

	return uid
}

func GetUsername(ctx context.Context, sm *sessions.SessionManager) string {
	username, ok := sm.Manager.Get(ctx, "username").(string)
	if !ok {
		return ""
	}

	return username
}

func newVersionAvailable(currentVersion, latestVersion string) bool {
	return semver.Compare("v"+latestVersion, "v"+currentVersion) == 1
}

func GetNavigationUrl(commonInfo *CommonInfo, location string) string {
	if commonInfo.SiteID == "-1" {
		if commonInfo.TenantID == "-1" {
			return fmt.Sprintf("%s", location)
		}

		return fmt.Sprintf("/tenant/%s%s", commonInfo.TenantID, location)
	}

	if commonInfo.TenantID == "-1" {
		return fmt.Sprintf("%s", location)
	}

	return fmt.Sprintf("/tenant/%s/site/%s%s", commonInfo.TenantID, commonInfo.SiteID, location)
}

func GetSiteSelectorUrl(c echo.Context, commonInfo *CommonInfo, siteID int) string {
	myURL := c.Request().URL.Path
	pathElements := strings.Split(myURL, "/")

	if siteID == -1 {
		if slices.Contains(pathElements, "site") {
			if len(pathElements) > 5 {
				elements := pathElements[5:]
				urlEnd := strings.Join(elements, "/")
				return fmt.Sprintf("/tenant/%s/%s", commonInfo.TenantID, urlEnd)
			} else {
				return fmt.Sprintf("/tenant/%s", commonInfo.TenantID)
			}
		} else {
			if len(pathElements) > 3 {
				elements := pathElements[3:]
				urlEnd := strings.Join(elements, "/")
				return fmt.Sprintf("/tenant/%s/%s", commonInfo.TenantID, urlEnd)
			} else {
				return fmt.Sprintf("/tenant/%s", commonInfo.TenantID)
			}
		}
	} else {
		if slices.Contains(pathElements, "site") {
			if commonInfo.IsProfile {
				return fmt.Sprintf("/tenant/%s/site/%d/profiles", commonInfo.TenantID, siteID)
			} else {
				if len(pathElements) > 5 {
					pathElements[4] = strconv.Itoa(siteID)
					return strings.Join(pathElements, "/")
				} else {
					return fmt.Sprintf("/tenant/%s/site/%d", commonInfo.TenantID, siteID)
				}
			}
		} else {
			if len(pathElements) > 3 {
				elements := pathElements[3:]
				urlEnd := strings.Join(elements, "/")
				return fmt.Sprintf("/tenant/%s/site/%d/%s", commonInfo.TenantID, siteID, urlEnd)
			} else {
				return fmt.Sprintf("/tenant/%s/site/%d", commonInfo.TenantID, siteID)
			}
		}
	}
}
