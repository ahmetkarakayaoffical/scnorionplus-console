package partials

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	ent "github.com/ahmetkarakayaoffical/ent"
	"strconv"
)

templ AddTagButton(p PaginationAndSort, allTags, appliedTags []*ent.Tag, agentId, url, method, target, swap string, commonInfo *CommonInfo) {
	<button type="button" class="border rounded-full px-5 py-1 flex gap-2 items-center ">
		<uk-icon icon="tag" hx-history="false" uk-cloak></uk-icon>
		{ i18n.T(ctx, "Add") }
	</button>
	<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
		<div class="uk-dropdown-nav uk-nav">
			<div class="flex flex-col gap-1 overflow-y-auto max-h-40">
				for _, tag := range getAvailableTags(allTags, appliedTags) {
					<form class="w-full border-b">
						<input type="hidden" name="tagId" value={ strconv.Itoa(tag.ID) }/>
						<input type="hidden" name="agentId" value={ agentId }/>
						<input id="page" type="hidden" name="page" value={ strconv.Itoa(p.CurrentPage) }/>
						<input id="pageSize" type="hidden" name="pageSize" value={ strconv.Itoa(p.PageSize) }/>
						<input id="sortBy" type="hidden" name="sortBy" value={ p.SortBy }/>
						<input id="sortOrder" type="hidden" name="sortOrder" value={ p.SortOrder }/>
						<button
							type="button"
							title={ tag.Tag }
							if method == "post" {
								hx-post={ url }
							} else {
								hx-get={ url }
							}
							hx-push-url="false"
							hx-target={ target }
							hx-swap={ swap }
							hx-include="input[name^='filter']"
						>
							<div class="flex flex-col text-left p-2 ">
								<div class="flex gap-1 items-center">
									<div class={ "rounded-full h-2 w-2 p-2", fmt.Sprintf("bg-%s-500", tag.Color) }></div>
									{ tag.Tag }
								</div>
								<p class="uk-text-muted text-xs">{ tag.Description }</p>
							</div>
						</button>
					</form>
				}
				<form>
					<button
						type="button"
						title="add more tags"
						href={ fmt.Sprintf("/tenant/%s/admin/tags", commonInfo.TenantID) }
						hx-get={ string(templ.URL(fmt.Sprintf("/tenant/%s/admin/tags", commonInfo.TenantID))) }
						hx-push-url="true"
						hx-target="#main"
						hx-swap="outerHTML"
						class="flex gap-2 items-center text-left p-2"
					>
						<uk-icon icon="tag" hx-history="false" uk-cloak></uk-icon>
						{ i18n.T(ctx, "tags.add_tags") }
					</button>
				</form>
			</div>
		</div>
	</div>
}

func getAvailableTags(allTags, usedTags []*ent.Tag) []*ent.Tag {
	available := []*ent.Tag{}

	for _, tag := range allTags {
		found := false
		for _, usedTag := range usedTags {
			if tag.ID == usedTag.ID {
				found = true
				break
			}
		}
		if !found {
			available = append(available, tag)
		}
	}

	return available
}
